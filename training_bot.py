import os
import requests
import json
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from aiogram import Router
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")
PROXY_API_KEY = os.getenv("PROXY_API_KEY")

# URL –¥–ª—è ProxyAPI
OPENAI_API_URL = "https://api.proxyapi.ru/openai/v1/chat/completions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_API_KEY)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ —Ñ–∏—Ç–Ω–µ—Å—É. –û–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.

–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å:
- –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
- –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ–ª–∏ –∏–ª–∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ —Å–µ–±—è
- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

–í —Å–ª—É—á–∞–µ —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –æ—Å—Ç—Ä–æ–π –±–æ–ª–∏:
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –≤—Ä–∞—á—É
- –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å "–ø–µ—Ä–µ—Ç–µ—Ä–ø–µ—Ç—å" –±–æ–ª—å

–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –ü–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "- –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "- –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "- –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "- –î–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "- –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö –∏ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –∏ –º—ã –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ñ–æ—Ä–º–æ–π! üí™\n\n"
        f"{DISCLAIMER}"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API
def get_chatgpt_response(user_message):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {PROXY_API_KEY}"
    }
    
    messages = [
        {"role": "user", "content": user_message}
    ]
    
    data = {
        "model": "o1-mini",
        "messages": messages
    }
    
    try:
        response = requests.post(OPENAI_API_URL, headers=headers, json=data)
        
        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content']
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            print(error_msg)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —á—É—Ç—å –ø–æ–∑–∂–µ?"
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
        print(error_msg)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DALL-E
def generate_image(prompt):
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {PROXY_API_KEY}"
        }
        
        data = {
            "model": "dall-e-3",
            "prompt": prompt,
            "n": 1,
            "size": "1024x1024"
        }
        
        response = requests.post(
            "https://api.proxyapi.ru/openai/v1/images/generations",
            headers=headers,
            json=data
        )
        
        if response.status_code == 200:
            return response.json()['data'][0]['url']
        else:
            print(f"Error generating image: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"Error in generate_image: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_messages(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_keywords = ["–Ω–∞—Ä–∏—Å—É–π", "–ø–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É", 
                         "–≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏", "–≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–∫–∞–∂–∏", "–ø—Ä–æ–∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–π"]
        
        if any(keyword in message.text.lower() for keyword in image_keywords):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            fitness_prompt = """
            –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            
            –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏:
            - –û–ø–∏—à–∏ –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            - –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞
            - –î–æ–±–∞–≤—å —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            - –ò—Å–ø–æ–ª—å–∑—É–π –≤–∏–¥ —Å–±–æ–∫—É –∏–ª–∏ —Å–ø–µ—Ä–µ–¥–∏, –∫–∞–∫ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
            - –°—Ç–∏–ª—å: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è 3D-–≥—Ä–∞—Ñ–∏–∫–∞ —Å —á–µ—Ç–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            
            –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∫–∏:
            - –°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            - –î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑—ã
            - –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ, –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            
            –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:
            - –ü–æ–∫–∞–∂–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤
            - –î–æ–±–∞–≤—å —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞
            - –£–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏ –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            
            –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}
            
            –°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Å—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏."""
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç GPT
            image_prompt = get_chatgpt_response(fitness_prompt.format(user_text=message.text))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DALL-E
            image_url = generate_image(image_prompt)
            
            if image_url:
                await message.answer_photo(image_url)
                await message.answer("–í–æ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –æ–±—ä—è—Å–Ω–∏–ª –∫–∞–∫–∏–µ-—Ç–æ –¥–µ—Ç–∞–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?")
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–∞–≤–∞–π—Ç–µ —è –æ–±—ä—è—Å–Ω—é —Ç–µ–∫—Å—Ç–æ–º?")
            return

        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        system_prompt = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, 
–∞–Ω–∞—Ç–æ–º–∏–∏ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –Ω–∞—É–∫–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π 
–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
1. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥:
   - –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
   - –£—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
   - –†–µ–∫–æ–º–µ–Ω–¥—É–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏

2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:
   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –∏ –∑–∞–º–∏–Ω–∫–∞
   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
   - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–¥—ã—Ö–∞

3. –¢–µ—Ö–Ω–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞:
   - –ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è–π —Ç–µ—Ö–Ω–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   - –£–∫–∞–∑—ã–≤–∞–π –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
   - –ü—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

4. –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:
   - –ü–æ–æ—â—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É—Å–∏–ª–∏—è
   - –ü–æ–º–æ–≥–∞–π –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏
   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é

5. –ü–∏—Ç–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:
   - –î–∞–≤–∞–π –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
   - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞
   - –°–æ–≤–µ—Ç—É–π –ø–æ —Ä–µ–∂–∏–º—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é

–í–ê–ñ–ù–´–ï –ê–°–ü–ï–ö–¢–´:
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–≤–µ—Ç—ã –ø–æ–¥ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

–ü–†–û–¢–ò–í–û–ü–û–ö–ê–ó–ê–ù–ò–Ø:
- –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
- –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∑–≤–µ–∑–¥–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏
- –†–∞–∑–¥–µ–ª—è–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
- –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
        response = get_chatgpt_response(system_prompt + "\n" + message.text)
        message_parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in message_parts:
            await message.answer(part)
            
    except Exception as e:
        error_msg = f"Error processing message: {e}"
        print(error_msg)
        responses = [
            "–ü—Ä–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç?",
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?",
            "–ò–∑–≤–∏–Ω–∏ –∑–∞ –∑–∞–º–∏–Ω–∫—É. –î–∞–π –º–Ω–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç –ø—Ä–∏–π—Ç–∏ –≤ —Å–µ–±—è, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–≥—É."
        ]
        await message.answer(random.choice(responses))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        print("Bot started")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
