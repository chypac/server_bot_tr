import os
import requests
import json
import time
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from aiogram import Router
import random
from utils.logger import logger, stats

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TELEGRAM_API_KEY = os.getenv("TELEGRAM_API_KEY")
PROXY_API_KEY = os.getenv("PROXY_API_KEY")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))  # ID –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# URL –¥–ª—è ProxyAPI
OPENAI_API_URL = "https://api.proxyapi.ru/openai/v1/chat/completions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_API_KEY)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º. –û–Ω –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.

–í–∞–∂–Ω–æ:
- –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
- –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –±–æ–ª–∏ –∏–ª–∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ —Å–µ–±—è

–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    logger.info(f"New user started bot: {user_id}")
    stats.log_message(user_id, "/start")
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä. –ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, "
        "–ø–æ–¥—Å–∫–∞–∂—É —Ç–µ—Ö–Ω–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π.\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö, —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö!\n\n"
        f"{DISCLAIMER}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("stats"))
async def stats_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        total_messages = stats.stats['total_messages']
        total_users = len(stats.stats['active_users'])
        total_errors = len(stats.stats['errors'])
        avg_response = stats.stats['average_response_time']
        training_plans = stats.stats['training_plans_created']
        
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–°–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {training_plans}\n"
            f"–û—à–∏–±–æ–∫: {total_errors}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response:.2f}s"
        )
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI API
def get_chatgpt_response(user_message, user_id):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {PROXY_API_KEY}"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversation_history = stats.get_user_history(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    context_messages = []
    for conv in conversation_history:
        context_messages.extend([
            {"role": "user", "content": conv['message']},
            {"role": "assistant", "content": conv['response']}
        ])
    
    system_prompt = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, "
        "–∞–Ω–∞—Ç–æ–º–∏–∏ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –Ω–∞—É–∫–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π "
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.\n\n"
        
        "–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:\n"
        "1. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥:\n"
        "   - –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n"
        "   - –£—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
        "   - –†–µ–∫–æ–º–µ–Ω–¥—É–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        
        "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
        "   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –∏ –∑–∞–º–∏–Ω–∫–∞\n"
        "   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        "   - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–¥—ã—Ö–∞\n"
        
        "3. –¢–µ—Ö–Ω–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞:\n"
        "   - –ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è–π —Ç–µ—Ö–Ω–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "   - –£–∫–∞–∑—ã–≤–∞–π –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏\n"
        "   - –ü—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        
        "4. –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        "   - –ü–æ–æ—â—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É—Å–∏–ª–∏—è\n"
        "   - –ü–æ–º–æ–≥–∞–π –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏\n"
        "   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
        
        "5. –ü–∏—Ç–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:\n"
        "   - –î–∞–≤–∞–π –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
        "   - –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞\n"
        "   - –°–æ–≤–µ—Ç—É–π –ø–æ —Ä–µ–∂–∏–º—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é\n"
        
        "–í–ê–ñ–ù–´–ï –ê–°–ü–ï–ö–¢–´:\n"
        "- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Å–æ–≤–µ—Ç—ã –ø–æ–¥ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞\n"
        "- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö\n"
        "- –†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n"
        
        "–ü–†–û–¢–ò–í–û–ü–û–ö–ê–ó–ê–ù–ò–Ø:\n"
        "- –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤\n"
        "- –†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n"
        "- –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n"
    )
    
    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(context_messages)
    messages.append({"role": "user", "content": user_message})
    
    data = {
        "model": "gpt-3.5-turbo",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 2000
    }
    
    try:
        start_time = time.time()
        response = requests.post(OPENAI_API_URL, headers=headers, data=json.dumps(data))
        response_time = time.time() - start_time
        
        if response.status_code == 200:
            response_text = response.json()['choices'][0]['message']['content']
            stats.log_message(user_id, user_message, response_time=response_time)
            
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
            if any(keyword in user_message.lower() for keyword in ['–ø–ª–∞–Ω', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞']):
                stats.log_training_plan(user_id)
            
            return response_text
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            logger.error(error_msg)
            stats.log_message(user_id, error_msg, is_error=True)
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —á—É—Ç—å –ø–æ–∑–∂–µ?"
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI: {e}"
        logger.error(error_msg)
        stats.log_message(user_id, error_msg, is_error=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id
    user_message = message.text
    
    try:
        response = get_chatgpt_response(user_message, user_id)
        stats.log_conversation(user_id, user_message, response)
        await message.answer(response)
    except Exception as e:
        error_msg = f"Error processing message: {e}"
        logger.error(error_msg)
        stats.log_message(user_id, error_msg, is_error=True)
        
        responses = [
            "–ü—Ä–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç? üèãÔ∏è‚Äç‚ôÇÔ∏è",
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞? üí™",
            "–ù—É–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ–¥—ã—à–∫–∞. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏! üéØ"
        ]
        await message.answer(random.choice(responses))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("Bot started")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
